<data:sql-datasource xmlns:data="http://jfreereport.sourceforge.net/namespaces/datasources/sql">
  <data:config/>
  <data:connection>
    <data:driver>org.postgresql.Driver</data:driver>
    <data:url>jdbc:postgresql://192.168.2.106:5432/SingerDB</data:url>
    <data:properties>
      <data:property name="user">postgres</data:property>
      <data:property name="password">encrypted:771b4a60055957</data:property>
      <data:property name="::pentaho-reporting::port">5432</data:property>
      <data:property name="::pentaho-reporting::name">Reportval</data:property>
      <data:property name="::pentaho-reporting::database-name">SingerDB</data:property>
      <data:property name="::pentaho-reporting::hostname">192.168.2.106</data:property>
      <data:property name="::pentaho-reporting::database-type">POSTGRESQL</data:property>
    </data:properties>
  </data:connection>
  <data:query-definitions>
    <data:query name="Agent">
      <data:static-query>Select 'All' as resourcename, 1 as sort
union
select distinct resourcename, 2 as sort from agent_dailysummary

order by sort, resourcename</data:static-query>
    </data:query>
    <data:query name="Month">
      <data:static-query>Select 'All' as month, '00' as value, 1 as sort
union
Select 'January' as month, '01' as value, 2 as sort
union
Select 'February' as month, '02' as value, 3 as sort
union
Select 'March' as month, '03' as value, 4 as sort
union
Select 'April' as month, '04' as value, 5 as sort
union
Select 'May' as month, '05' as value, 6 as sort
union
Select 'June' as month, '06' as value, 7 as sort
union
Select 'July' as month, '07' as value, 8 as sort
union
Select 'August' as month, '08' as value, 9 as sort
union
Select 'Sepetember' as month, '09' as value, 10 as sort
union
Select 'October' as month, '10' as value, 11 as sort
union
Select 'November' as month, '11' as value, 12 as sort
union
Select 'December' as month, '12' as value, 13 as sort
order by sort </data:static-query>
    </data:query>
    <data:query name="Year">
      <data:static-query>Select  '2016' as year, 1 as sort 
union
Select  '2015' as year, 1 as sort 
union
Select  '2014' as year, 2 as sort  
union
Select  '2013' as year, 3 as sort 
order by sort 

</data:static-query>
    </data:query>
    <data:query name="AgentSummary">
      <data:static-query>
SELECT
     id,
     month || '-' || year as date,
     resourcename,
     staffedtime::interval::text as staffedtime,
     (CASE WHEN ${Mode} = 'INBOUND' THEN idleinbound::interval
	when ${Mode} = 'OUTBOUND' then idleoutbound::interval
	else (idleinbound::interval+idleoutbound::interval) end)::text  as  idletime ,
     (CASE WHEN ${Mode} = 'INBOUND' THEN totaloncalltin::interval
	when ${Mode} = 'OUTBOUND' then totaloncalltout::interval
	else ( totaloncalltin::interval + totaloncalltout::interval)end)::text  as  totaloncallt ,
     (CASE WHEN ${Mode} = 'INBOUND' THEN acwin::interval
	when ${Mode} = 'OUTBOUND' then acwout::interval
	else ( acwin::interval + acwout::interval) end)::text  as  acw ,
     (CASE WHEN ${Mode} = 'INBOUND' THEN tholdtimein::interval
	when ${Mode} = 'OUTBOUND' then tholdtimeout::interval
	else ( tholdtimein::interval + tholdtimeout::interval) end)::text  as  tholdtime ,
     (CASE WHEN ${Mode} = 'INBOUND' THEN breakinbound::interval
	when ${Mode} = 'OUTBOUND' then breakoutbound::interval
	else ( breakinbound::interval + breakoutbound::interval) end)::text  as  breaktime ,
     (CASE WHEN ${Mode} = 'INBOUND' THEN totalcallshin::integer
	when ${Mode} = 'OUTBOUND' then totalcallshout::integer
	else ( totalcallshin::integer + totalcallshout::integer) end)::text  as  totalcallsh ,
     (CASE WHEN ${Mode} = 'INBOUND' THEN ahtin::interval
	when ${Mode} = 'OUTBOUND' then ahtout::interval
	else ( ahtin::interval + ahtout::interval) end)::text  as  aht,
     company,
     tenant,

     (sum(staffedtime::interval) OVER (PARTITION BY month || '-' || year ))::text as staffedtimedailysum,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN idleinbound::interval
	when ${Mode} = 'OUTBOUND' then idleoutbound::interval
	else (idleinbound::interval+idleoutbound::interval) end)::interval) OVER (PARTITION BY month || '-' || year))::text as idledailysum,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN totaloncalltin::interval
	when ${Mode} = 'OUTBOUND' then totaloncalltout::interval
	else ( totaloncalltin::interval + totaloncalltout::interval)end)::interval) OVER (PARTITION BY month || '-' || year))::text  as  totaloncalltdailysum,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN acwin::interval
	when ${Mode} = 'OUTBOUND' then acwout::interval
	else ( acwin::interval + acwout::interval) end)::interval) OVER (PARTITION BY month || '-' || year))::text  as  acwdailysum ,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN tholdtimein::interval
	when ${Mode} = 'OUTBOUND' then tholdtimeout::interval
	else ( tholdtimein::interval + tholdtimeout::interval) end)::interval) OVER (PARTITION BY month || '-' || year))::text  as  tholdtimedailysum ,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN breakinbound::interval
	when ${Mode} = 'OUTBOUND' then breakoutbound::interval
	else ( breakinbound::interval + breakoutbound::interval) end)::interval) OVER (PARTITION BY month || '-' || year))::text  as  breaktimedailysum ,
     (sum(CASE WHEN ${Mode} = 'INBOUND' THEN totalcallshin::integer
	when ${Mode} = 'OUTBOUND' then totalcallshout::integer
	else ( totalcallshin::integer + totalcallshout::integer) end) OVER (PARTITION BY month || '-' || year))::text  as  totalcallshdailysum ,
     (avg (CASE WHEN ${Mode} = 'INBOUND' THEN ahtin::interval
	when ${Mode} = 'OUTBOUND' then ahtout::interval
	else ( ahtin::interval + ahtout::interval) end)  OVER (PARTITION BY month || '-' || year))::text  as  ahtdailyavg ,

	--(totaloncalltin::interval+totaloncalltout::interval+acwin::interval+acwout::interval)/(case when (totalcallshin::integer + totalcallshout::integer) = 0 then 1 else (totalcallshin::integer + totalcallshout::integer) end) over (PARTITION BY month || '-' || year)  as ahhhhhht,


     (sum(CASE WHEN ${Mode} = 'INBOUND' THEN totalcallshin::integer
	when ${Mode} = 'OUTBOUND' then totalcallshout::integer
	else ( totalcallshin::integer + totalcallshout::integer) end) OVER ())::text  as  totalcallshfullsum ,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN breakinbound::interval
	when ${Mode} = 'OUTBOUND' then breakoutbound::interval
	else ( breakinbound::interval + breakoutbound::interval) end)::interval) OVER ())::text  as  breaktimefullsum ,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN tholdtimein::interval
	when ${Mode} = 'OUTBOUND' then tholdtimeout::interval
	else ( tholdtimein::interval + tholdtimeout::interval) end)::interval) OVER ())::text  as  tholdtimefullsum ,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN acwin::interval
	when ${Mode} = 'OUTBOUND' then acwout::interval
	else ( acwin::interval + acwout::interval) end)::interval) OVER ())::text  as  acwfullsum ,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN totaloncalltin::interval
	when ${Mode} = 'OUTBOUND' then totaloncalltout::interval
	else ( totaloncalltin::interval + totaloncalltout::interval)end)::interval) OVER ())::text  as  totaloncalltfullsum,
     (sum((CASE WHEN ${Mode} = 'INBOUND' THEN idleinbound::interval
	when ${Mode} = 'OUTBOUND' then idleoutbound::interval
	else (idleinbound::interval+idleoutbound::interval) end)::interval) OVER ())::text as idlefullsum,
     (sum(staffedtime::interval) OVER ())::text as staffedtimefullsum,
      (avg (CASE WHEN ${Mode} = 'INBOUND' THEN ahtin::interval
	when ${Mode} = 'OUTBOUND' then ahtout::interval
	else ( ahtin::interval + ahtout::interval) end)  OVER ())::text as  ahtfullavg 
     
FROM
     &quot;public&quot;.&quot;agent_monthlysummary&quot;
  Where
	year = ${Year}
	and month IN (SELECT CASE WHEN(${Month}::text = '00' OR month IS NULL OR ${Month}::text = '') THEN month  ELSE ${Month}::text  END)
	 and 
	resourcename IN (SELECT CASE WHEN(${agent}::text = 'All' OR ${agent}::text IS NULL) THEN resourcename ELSE ${agent}::text  END)

order by year desc, month desc	</data:static-query>
    </data:query>
    <data:query name="Mode">
      <data:static-query>select 'All' as a
union
select 'INBOUND' as a
union 
select 'OUTBOUND' as a
</data:static-query>
    </data:query>
  </data:query-definitions>
</data:sql-datasource>
